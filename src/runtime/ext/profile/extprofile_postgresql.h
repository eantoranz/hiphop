/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_POSTGRESQL_H__
#define __EXTPROFILE_POSTGRESQL_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/ext/ext_postgresql.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

inline int64 x_pg_affected_rows(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_affected_rows);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_affected_rows(result);
}

inline void x_pg_cancel_query(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_cancel_query);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_cancel_query(connection);
}

inline void x_pg_client_encoding(CStrRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_client_encoding);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_client_encoding(connection);
}

inline void x_pg_close(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_close);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_close(connection);
}

inline Variant x_pg_connect(CStrRef connection_string, int connect_type = 1) {
  FUNCTION_INJECTION_BUILTIN(pg_connect);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_connect(connection_string, connect_type);
}

inline void x_pg_connection_busy(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_connection_busy);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_connection_busy(connection);
}

inline void x_pg_connection_reset(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_connection_reset);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_connection_reset(connection);
}

inline void x_pg_connection_status(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_connection_status);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_connection_status(connection);
}

inline void x_pg_convert(CVarRef connection, CStrRef table_name, CStrRef assoc_array, CStrRef options) {
  FUNCTION_INJECTION_BUILTIN(pg_convert);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_convert(connection, table_name, assoc_array, options);
}

inline void x_pg_copy_from(CVarRef connection, CStrRef table_name, CStrRef rows, CStrRef delimiter, CStrRef null_as) {
  FUNCTION_INJECTION_BUILTIN(pg_copy_from);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_copy_from(connection, table_name, rows, delimiter, null_as);
}

inline void x_pg_copy_to(CVarRef connection, CStrRef table_name, CStrRef rows, CStrRef delimiter, CStrRef null_as) {
  FUNCTION_INJECTION_BUILTIN(pg_copy_to);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_copy_to(connection, table_name, rows, delimiter, null_as);
}

inline void x_pg_dbname(CStrRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_dbname);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_dbname(connection);
}

inline void x_pg_delete(CVarRef connection, CStrRef table_name, CStrRef assoc_array, CStrRef options) {
  FUNCTION_INJECTION_BUILTIN(pg_delete);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_delete(connection, table_name, assoc_array, options);
}

inline void x_pg_end_copy(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_end_copy);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_end_copy(connection);
}

inline Variant x_pg_escape_bytea(CVarRef connection, CStrRef data) {
  FUNCTION_INJECTION_BUILTIN(pg_escape_bytea);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_escape_bytea(connection, data);
}

inline Variant x_pg_escape_string(CVarRef connection, CStrRef data) {
  FUNCTION_INJECTION_BUILTIN(pg_escape_string);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_escape_string(connection, data);
}

inline void x_pg_execute(CVarRef connection, CStrRef stmtname, CArrRef params) {
  FUNCTION_INJECTION_BUILTIN(pg_execute);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  f_pg_execute(connection, stmtname, params);
}

inline Variant x_pg_fetch_all_columns(CVarRef result, CStrRef column) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_all_columns);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_all_columns(result, column);
}

inline Variant x_pg_fetch_all(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_all);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_all(result);
}

inline Variant x_pg_fetch_array(CVarRef result, CVarRef row = null, int result_type = 3) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_array);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_array(result, row, result_type);
}

inline Variant x_pg_fetch_assoc(CVarRef result, CVarRef row = null) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_assoc);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_assoc(result, row);
}

inline Variant x_pg_fetch_object(CVarRef result, CVarRef row = null, CStrRef class_name = "stdClass", CArrRef params = null) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_object);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_object(result, row, class_name, params);
}

inline Variant x_pg_fetch_result(CVarRef result, int64 row, CStrRef field) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_result);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_result(result, row, field);
}

inline Variant x_pg_fetch_row(CVarRef result, CVarRef row = null) {
  FUNCTION_INJECTION_BUILTIN(pg_fetch_row);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_fetch_row(result, row);
}

inline Variant x_pg_field_is_null(CVarRef result, int64 row, CStrRef field) {
  FUNCTION_INJECTION_BUILTIN(pg_field_is_null);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_is_null(result, row, field);
}

inline String x_pg_field_name(CVarRef result, int64 field_number) {
  FUNCTION_INJECTION_BUILTIN(pg_field_name);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_name(result, field_number);
}

inline Variant x_pg_field_num(CVarRef result, CStrRef field_name) {
  FUNCTION_INJECTION_BUILTIN(pg_field_num);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_num(result, field_name);
}

inline Variant x_pg_field_prtlen(CVarRef result, CVarRef field_name_or_number) {
  FUNCTION_INJECTION_BUILTIN(pg_field_prtlen);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_prtlen(result, field_name_or_number);
}

inline Variant x_pg_field_size(CVarRef result, int64 field_number) {
  FUNCTION_INJECTION_BUILTIN(pg_field_size);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_size(result, field_number);
}

inline String x_pg_field_table(CVarRef result, int64 field_number, CStrRef oid_only) {
  FUNCTION_INJECTION_BUILTIN(pg_field_table);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_table(result, field_number, oid_only);
}

inline String x_pg_field_type_oid(CVarRef result, int64 field_number) {
  FUNCTION_INJECTION_BUILTIN(pg_field_type_oid);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_type_oid(result, field_number);
}

inline String x_pg_field_type(CVarRef result, int64 field_number) {
  FUNCTION_INJECTION_BUILTIN(pg_field_type);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_field_type(result, field_number);
}

inline Variant x_pg_free_result(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_free_result);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_free_result(result);
}

inline Variant x_pg_get_notify(CVarRef connection, int result_type) {
  FUNCTION_INJECTION_BUILTIN(pg_get_notify);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_get_notify(connection, result_type);
}

inline String x_pg_get_pid(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_get_pid);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_get_pid(connection);
}

inline Variant x_pg_get_result(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_get_result);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_get_result(connection);
}

inline String x_pg_host(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_host);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_host(connection);
}

inline Variant x_pg_insert(CVarRef connection, CStrRef table_name, CStrRef assoc_array, CStrRef options) {
  FUNCTION_INJECTION_BUILTIN(pg_insert);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_insert(connection, table_name, assoc_array, options);
}

inline String x_pg_last_error(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_last_error);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_last_error(connection);
}

inline String x_pg_last_notice(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_last_notice);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_last_notice(connection);
}

inline String x_pg_last_oid(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_last_oid);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_last_oid(result);
}

inline Variant x_pg_lo_close(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_close);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_close(result);
}

inline Variant x_pg_lo_create(CVarRef connection, CStrRef object_id) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_create);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_create(connection, object_id);
}

inline Variant x_pg_lo_export(CVarRef connection, CStrRef oid, CStrRef pathname) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_export);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_export(connection, oid, pathname);
}

inline Variant x_pg_lo_import(CVarRef connection, CStrRef pathname, CStrRef object_id) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_import);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_import(connection, pathname, object_id);
}

inline Variant x_pg_lo_open(CVarRef connection, CStrRef oid, CStrRef mode) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_open);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_open(connection, oid, mode);
}

inline Variant x_pg_lo_read_all(CStrRef large_object) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_read_all);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_read_all(large_object);
}

inline Variant x_pg_lo_read(CStrRef large_object, CStrRef len) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_read);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_read(large_object, len);
}

inline Variant x_pg_lo_seek(CStrRef large_object, CStrRef offset, CStrRef whence) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_seek);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_seek(large_object, offset, whence);
}

inline Variant x_pg_lo_tell(CStrRef large_object) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_tell);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_tell(large_object);
}

inline Variant x_pg_lo_unlink(CVarRef connection, CStrRef oid) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_unlink);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_unlink(connection, oid);
}

inline Variant x_pg_lo_write(CStrRef large_object, CStrRef data, CStrRef len) {
  FUNCTION_INJECTION_BUILTIN(pg_lo_write);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_lo_write(large_object, data, len);
}

inline Variant x_pg_meta_data(CVarRef connection, CStrRef table_name) {
  FUNCTION_INJECTION_BUILTIN(pg_meta_data);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_meta_data(connection, table_name);
}

inline Variant x_pg_num_fields(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_num_fields);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_num_fields(result);
}

inline Variant x_pg_num_rows(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_num_rows);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_num_rows(result);
}

inline Variant x_pg_options(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_options);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_options(connection);
}

inline String x_pg_parameter_status(CVarRef connection, CStrRef param_name) {
  FUNCTION_INJECTION_BUILTIN(pg_parameter_status);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_parameter_status(connection, param_name);
}

inline Variant x_pg_pconnect(CStrRef connection_string, CStrRef host, CStrRef hostaddr, CStrRef port, CStrRef dbname, CStrRef user, CStrRef password, CStrRef connect_timeout, CStrRef options, CStrRef tty, CStrRef sslmode, CStrRef requiressl, CStrRef service, CStrRef connect_type) {
  FUNCTION_INJECTION_BUILTIN(pg_pconnect);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_pconnect(connection_string, host, hostaddr, port, dbname, user, password, connect_timeout, options, tty, sslmode, requiressl, service, connect_type);
}

inline Variant x_pg_ping(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_ping);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_ping(connection);
}

inline Variant x_pg_port(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_port);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_port(connection);
}

inline Variant x_pg_prepare(CVarRef connection, CStrRef stmtname, CStrRef query) {
  FUNCTION_INJECTION_BUILTIN(pg_prepare);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_prepare(connection, stmtname, query);
}

inline Variant x_pg_put_line(CVarRef connection, CStrRef data) {
  FUNCTION_INJECTION_BUILTIN(pg_put_line);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_put_line(connection, data);
}

inline Variant x_pg_query_params(CVarRef connection, CStrRef query, CArrRef params) {
  FUNCTION_INJECTION_BUILTIN(pg_query_params);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_query_params(connection, query, params);
}

inline Variant x_pg_query(CVarRef connection, CStrRef query) {
  FUNCTION_INJECTION_BUILTIN(pg_query);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_query(connection, query);
}

inline Variant x_pg_result_error_field(CVarRef result, CStrRef fieldcode) {
  FUNCTION_INJECTION_BUILTIN(pg_result_error_field);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_result_error_field(result, fieldcode);
}

inline Variant x_pg_result_error(CVarRef result) {
  FUNCTION_INJECTION_BUILTIN(pg_result_error);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_result_error(result);
}

inline Variant x_pg_result_seek(CVarRef result, CStrRef offset) {
  FUNCTION_INJECTION_BUILTIN(pg_result_seek);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_result_seek(result, offset);
}

inline Variant x_pg_result_status(CVarRef result, int64 type = 1) {
  FUNCTION_INJECTION_BUILTIN(pg_result_status);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_result_status(result, type);
}

inline Variant x_pg_select(CVarRef connection, CStrRef table_name, CStrRef assoc_array, CStrRef options) {
  FUNCTION_INJECTION_BUILTIN(pg_select);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_select(connection, table_name, assoc_array, options);
}

inline Variant x_pg_send_execute(CVarRef connection, CStrRef stmtname, CArrRef params) {
  FUNCTION_INJECTION_BUILTIN(pg_send_execute);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_send_execute(connection, stmtname, params);
}

inline Variant x_pg_send_prepare(CVarRef connection, CStrRef stmtname, CStrRef query) {
  FUNCTION_INJECTION_BUILTIN(pg_send_prepare);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_send_prepare(connection, stmtname, query);
}

inline Variant x_pg_send_query_params(CVarRef connection, CStrRef query, CArrRef params) {
  FUNCTION_INJECTION_BUILTIN(pg_send_query_params);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_send_query_params(connection, query, params);
}

inline Variant x_pg_send_query(CVarRef connection, CStrRef query) {
  FUNCTION_INJECTION_BUILTIN(pg_send_query);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_send_query(connection, query);
}

inline Variant x_pg_set_client_encoding(CVarRef connection, CStrRef encoding) {
  FUNCTION_INJECTION_BUILTIN(pg_set_client_encoding);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_set_client_encoding(connection, encoding);
}

inline Variant x_pg_set_error_verbosity(CVarRef connection, CStrRef verbosity) {
  FUNCTION_INJECTION_BUILTIN(pg_set_error_verbosity);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_set_error_verbosity(connection, verbosity);
}

inline bool x_pg_trace(CStrRef pathname, CStrRef mode = "w", CVarRef connection = null) {
  FUNCTION_INJECTION_BUILTIN(pg_trace);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_trace(pathname, mode, connection);
}

inline int x_pg_transaction_status(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_transaction_status);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_transaction_status(connection);
}

inline String x_pg_tty(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_tty);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_tty(connection);
}

inline String x_pg_unescape_bytea(CStrRef data) {
  FUNCTION_INJECTION_BUILTIN(pg_unescape_bytea);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_unescape_bytea(data);
}

inline bool x_pg_untrace(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_untrace);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_untrace(connection);
}

inline Variant x_pg_update(CVarRef connection, CStrRef table_name, CVarRef data, CVarRef condition, int options) {
  FUNCTION_INJECTION_BUILTIN(pg_update);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_update(connection, table_name, data, condition, options);
}

inline Variant x_pg_version(CVarRef connection) {
  FUNCTION_INJECTION_BUILTIN(pg_version);
  TAINT_OBSERVER(TAINT_BIT_NONE, TAINT_BIT_NONE);
  return f_pg_version(connection);
}


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_POSTGRESQL_H__
