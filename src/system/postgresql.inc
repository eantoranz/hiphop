// @generated by "php idl.php inc {input.idl.php} {output.inc}"

#if EXT_TYPE == 0
"pg_affected_rows", T(Int64), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-affected-rows.php )\n *\n * pg_affected_rows() returns the number of tuples (instances/records/rows)\n * affected by INSERT, UPDATE, and DELETE queries.\n *\n * This function used to be called pg_cmdtuples().\n *\n * @result     mixed\n *\n * @return     int     The number of rows affected by the query. If no\n *                     tuple is affected, it will return 0.\n */", 
"pg_cancel_query", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-cancel-query.php )\n *\n * pg_cancel_query() cancels an asynchronous query sent with\n * pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot\n * cancel a query executed using pg_query().\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_client_encoding", T(Void), S(0), "connection", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-client-encoding.php\n * )\n *\n * PostgreSQL supports automatic character set conversion between server\n * and client for certain character sets. pg_client_encoding() returns the\n * client encoding as a string. The returned string will be one of the\n * standard PostgreSQL encoding identifiers.\n *\n * This function requires PHP 4.0.3 or higher and PostgreSQL 7.0 or higher.\n * If libpq is compiled without multibyte encoding support,\n * pg_client_encoding() always returns SQL_ASCII. Supported encoding\n * depends on PostgreSQL version. Refer to the PostgreSQL Documentation\n * supported encodings.\n *\n * The function used to be called pg_clientencoding().\n *\n * @connection string\n *\n * @return     mixed   The client encoding, or FALSE on error.\n */", 
"pg_close", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-close.php )\n *\n * pg_close() closes the non-persistent connection to a PostgreSQL database\n * associated with the given connection resource.\n *\n * Using pg_close() is not usually necessary, as non-persistent open\n * connections are automatically closed at the end of the script.\n *\n * If there is open large object resource on the connection, do not close\n * the connection before closing all large object resources.\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_connect", T(Variant), S(0), "connection_string", T(String), NULL, NULL, S(0), "connect_type", T(Int32), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-connect.php )\n *\n * pg_connect() opens a connection to a PostgreSQL database specified by\n * the connection_string.\n *\n * If a second call is made to pg_connect() with the same connection_string\n * as an existing connection, the existing connection will be returned\n * unless you pass PGSQL_CONNECT_FORCE_NEW as connect_type.\n *\n * The old syntax with multiple parameters $conn = pg_connect(\"host\",\n * \"port\", \"options\", \"tty\", \"dbname\") has been deprecated.\n *\n * @connection_string\n *             string  The connection_string can be empty to use all\n *                     default parameters, or it can contain one or more\n *                     parameter settings separated by whitespace. Each\n *                     parameter setting is in the form keyword = value.\n *                     Spaces around the equal sign are optional. To write\n *                     an empty value or a value containing spaces,\n *                     surround it with single quotes, e.g., keyword = 'a\n *                     value'. Single quotes and backslashes within the\n *                     value must be escaped with a backslash, i.e., \\' and\n *                     \\\\.\n *\n *                     The currently recognized parameter keywords are:\n *                     host, hostaddr, port, dbname (defaults to value of\n *                     user), user, password, connect_timeout, options, tty\n *                     (ignored), sslmode, requiressl (deprecated in favor\n *                     of sslmode), and service. Which of these arguments\n *                     exist depends on your PostgreSQL version.\n *\n *                     The options parameter can be used to set command\n *                     line parameters to be invoked by the server.\n * @connect_type\n *             int\n *\n * @return     mixed   PostgreSQL connection resource on success, FALSE on\n *                     failure.\n */", 
"pg_connection_busy", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-connection-busy.php\n * )\n *\n * pg_connection_busy() determines whether or not a connection is busy. If\n * it is busy, a previous query is still executing. If pg_get_result() is\n * used on the connection, it will be blocked.\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE if the connection is busy, FALSE\n *                     otherwise.\n */", 
"pg_connection_reset", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-connection-reset.php\n * )\n *\n * pg_connection_reset() resets the connection. It is useful for error\n * recovery.\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_connection_status", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-connection-status.php )\n *\n * pg_connection_status() returns the status of the specified connection.\n *\n * @connection mixed\n *\n * @return     mixed   PGSQL_CONNECTION_OK or PGSQL_CONNECTION_BAD.\n */", 
"pg_convert", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "assoc_array", T(String), NULL, NULL, S(0), "options", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-convert.php )\n *\n * pg_convert() checks and converts the values in assoc_array into suitable\n * values for use in an SQL statement. Precondition for pg_convert() is the\n * existence of a table table_name which has at least as many columns as\n * assoc_array has elements. The fieldnames in table_name must match the\n * indices in assoc_array and the corresponding datatypes must be\n * compatible. Returns an array with the converted values on success, FALSE\n * otherwise.\n *\n * If there are boolean fields in table_name don't use the constant TRUE in\n * assoc_array. It will be converted to the string 'TRUE' which is no valid\n * entry for boolean fields in PostgreSQL. Use one of t, true, 1, y, yes\n * instead. WarningThis function is EXPERIMENTAL. The behaviour of this\n * function, its name, and surrounding documentation may change without\n * notice in a future release of PHP. This function should be used at your\n * own risk.\n *\n * @connection mixed\n * @table_name string\n * @assoc_array\n *             string\n * @options    string\n *\n * @return     mixed   An array of converted values, or FALSE on error.\n */", 
"pg_copy_from", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "rows", T(String), NULL, NULL, S(0), "delimiter", T(String), NULL, NULL, S(0), "null_as", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-copy-from.php )\n *\n * pg_copy_from() inserts records into a table from rows. It issues a COPY\n * FROM SQL command internally to insert records.\n *\n * @connection mixed\n * @table_name string\n * @rows       string\n * @delimiter  string\n * @null_as    string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_copy_to", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "rows", T(String), NULL, NULL, S(0), "delimiter", T(String), NULL, NULL, S(0), "null_as", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-copy-to.php )\n *\n * pg_copy_to() copies a table to an array. It issues COPY TO SQL command\n * internally to retrieve records.\n *\n * @connection mixed\n * @table_name string\n * @rows       string\n * @delimiter  string\n * @null_as    string\n *\n * @return     mixed   An array with one element for each line of COPY\n *                     data. It returns FALSE on failure.\n */", 
"pg_dbname", T(Void), S(0), "connection", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-dbname.php )\n *\n * pg_dbname() returns the name of the database that the given PostgreSQL\n * connection resource.\n *\n * @connection string\n *\n * @return     mixed   A string containing the name of the database the\n *                     connection is to, or FALSE on error.\n */", 
"pg_delete", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "assoc_array", T(String), NULL, NULL, S(0), "options", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-delete.php )\n *\n * pg_delete() deletes records from a table specified by the keys and\n * values in assoc_array. If options is specified, pg_convert() is applied\n * to assoc_array with the specified options.\n *\n * @connection mixed\n * @table_name string\n * @assoc_array\n *             string\n * @options    string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Returns\n *                     string if PGSQL_DML_STRING is passed via options.\n */", 
"pg_end_copy", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-end-copy.php )\n *\n * pg_end_copy() syncs the PostgreSQL frontend (usually a web server\n * process) with the PostgreSQL server after doing a copy operation\n * performed by pg_put_line(). pg_end_copy() must be issued, otherwise the\n * PostgreSQL server may get out of sync with the frontend and will report\n * an error.\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_escape_bytea", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-escape-bytea.php )\n *\n * pg_escape_bytea() escapes string for bytea datatype. It returns escaped\n * string.\n *\n * When you SELECT a bytea type, PostgreSQL returns octal byte values\n * prefixed with '\\' (e.g. \\032). Users are supposed to convert back to\n * binary format manually.\n *\n * This function requires PostgreSQL 7.2 or later. With PostgreSQL 7.2.0\n * and 7.2.1, bytea values must be cast when you enable multi-byte support.\n * i.e. INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea);\n * PostgreSQL 7.2.2 or later does not need a cast. The exception is when\n * the client and backend character encoding does not match, and there may\n * be multi-byte stream error. User must then cast to bytea to avoid this\n * error.\n *\n * @connection mixed\n * @data       string\n *\n * @return     mixed   A string containing the escaped data.\n */", 
"pg_escape_string", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-escape-string.php )\n *\n * pg_escape_string() escapes a string for insertion into the database. It\n * returns an escaped string in the PostgreSQL format. Use of this function\n * is recommended instead of addslashes(). If the type of the column is\n * bytea, pg_escape_bytea() must be used instead.\n *\n * This function requires PostgreSQL 7.2 or later.\n *\n * @connection mixed\n * @data       string\n *\n * @return     mixed   A string containing the escaped data.\n */", 
"pg_execute", T(Void), S(0), "connection", T(Variant), NULL, NULL, S(0), "stmtname", T(String), NULL, NULL, S(0), "params", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-execute.php )\n *\n * Sends a request to execute a prepared statement with given parameters,\n * and waits for the result.\n *\n * pg_execute() is like pg_query_params(), but the command to be executed\n * is specified by naming a previously-prepared statement, instead of\n * giving a query string. This feature allows commands that will be used\n * repeatedly to be parsed and planned just once, rather than each time\n * they are executed. The statement must have been prepared previously in\n * the current session. pg_execute() is supported only against PostgreSQL\n * 7.4 or higher connections; it will fail when using earlier versions.\n *\n * The parameters are identical to pg_query_params(), except that the name\n * of a prepared statement is given instead of a query string.\n *\n * @connection mixed\n * @stmtname   string\n * @params     vector\n *\n * @return     mixed   A query result resource on success or FALSE on\n *                     failure.\n */", 
"pg_fetch_all_columns", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "column", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-fetch-all-columns.php )\n *\n * pg_fetch_all_columns() returns an array that contains all rows (records)\n * in a particular column of the result resource. This function sets NULL\n * fields to the PHP NULL value.\n *\n * @result     mixed\n * @column     string\n *\n * @return     mixed   An array with all values in the result column.\n *\n *                     FALSE is returned if column is larger than the\n *                     number of columns in the result, or on any other\n *                     error.\n */", 
"pg_fetch_all", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-all.php )\n *\n * pg_fetch_all() returns an array that contains all rows (records) in the\n * result resource. This function sets NULL fields to the PHP NULL value.\n *\n * @result     mixed\n *\n * @return     mixed   An array with all rows in the result. Each row is an\n *                     array of field values indexed by field name.\n *\n *                     FALSE is returned if there are no rows in the\n *                     result, or on any other error.\n */", 
"pg_fetch_array", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Variant), "N;", "null", S(0), "result_type", T(Int32), "i:3;", "3", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-array.php )\n *\n * pg_fetch_array() returns an array that corresponds to the fetched row\n * (record).\n *\n * pg_fetch_array() is an extended version of pg_fetch_row(). In addition\n * to storing the data in the numeric indices (field number) to the result\n * array, it can also store the data using associative indices (field\n * name). It stores both indicies by default. This function sets NULL\n * fields to the PHP NULL value.\n *\n * pg_fetch_array() is NOT significantly slower than using pg_fetch_row(),\n * and is significantly easier to use.\n *\n * @result     mixed\n * @row        mixed\n * @result_type\n *             int\n *\n * @return     mixed   An array indexed numerically (beginning with 0) or\n *                     associatively (indexed by field name), or both. Each\n *                     value in the array is represented as a string.\n *                     Database NULL values are returned as NULL.\n *\n *                     FALSE is returned if row exceeds the number of rows\n *                     in the set, there are no more rows, or on any other\n *                     error.\n */", 
"pg_fetch_assoc", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-assoc.php )\n *\n * pg_fetch_assoc() returns an associative array that corresponds to the\n * fetched row (records).\n *\n * pg_fetch_assoc() is equivalent to calling pg_fetch_array() with\n * PGSQL_ASSOC as the optional third parameter. It only returns an\n * associative array. If you need the numeric indices, use pg_fetch_row().\n * This function sets NULL fields to the PHP NULL value.\n *\n * pg_fetch_assoc() is NOT significantly slower than using pg_fetch_row(),\n * and is significantly easier to use.\n *\n * @result     mixed\n * @row        mixed\n *\n * @return     mixed   An array indexed associatively (by field name). Each\n *                     value in the array is represented as a string.\n *                     Database NULL values are returned as NULL.\n *\n *                     FALSE is returned if row exceeds the number of rows\n *                     in the set, there are no more rows, or on any other\n *                     error.\n */", 
"pg_fetch_object", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Variant), "N;", "null", S(0), "class_name", T(String), "s:8:\"stdClass\";", "\"stdClass\"", S(0), "params", T(Array), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-object.php )\n *\n * pg_fetch_object() returns an object with properties that correspond to\n * the fetched row's field names. It can optionally instantiate an object\n * of a specific class, and pass parameters to that class's constructor.\n * This function sets NULL fields to the PHP NULL value.\n *\n * Speed-wise, the function is identical to pg_fetch_array(), and almost as\n * fast as pg_fetch_row() (the difference is insignificant).\n *\n * @result     mixed\n * @row        mixed\n * @class_name string\n * @params     vector\n *\n * @return     mixed   An object with one attribute for each field name in\n *                     the result. Database NULL values are returned as\n *                     NULL.\n *\n *                     FALSE is returned if row exceeds the number of rows\n *                     in the set, there are no more rows, or on any other\n *                     error.\n */", 
"pg_fetch_result", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Int64), NULL, NULL, S(0), "field", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-result.php )\n *\n * pg_fetch_result() returns the value of a particular row and field\n * (column) in a PostgreSQL result resource.\n *\n * This function used to be called pg_result().\n *\n * @result     mixed\n * @row        int\n * @field      string\n *\n * @return     mixed   Boolean is returned as \"t\" or \"f\". All other types,\n *                     including arrays are returned as strings formatted\n *                     in the same default PostgreSQL manner that you would\n *                     see in the psql program. Database NULL values are\n *                     returned as NULL.\n *\n *                     FALSE is returned if row exceeds the number of rows\n *                     in the set, or on any other error.\n */", 
"pg_fetch_row", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-fetch-row.php )\n *\n * pg_fetch_row() fetches one row of data from the result associated with\n * the specified result resource. This function sets NULL fields to the PHP\n * NULL value.\n *\n * @result     mixed\n * @row        mixed\n *\n * @return     mixed   An array, indexed from 0 upwards, with each value\n *                     represented as a string. Database NULL values are\n *                     returned as NULL.\n *\n *                     FALSE is returned if row exceeds the number of rows\n *                     in the set, there are no more rows, or on any other\n *                     error.\n */", 
"pg_field_is_null", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "row", T(Int64), NULL, NULL, S(0), "field", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-is-null.php )\n *\n * pg_field_is_null() tests if a field in a PostgreSQL result resource is\n * SQL NULL or not.\n *\n * This function used to be called pg_fieldisnull().\n *\n * @result     mixed\n * @row        int\n * @field      string\n *\n * @return     mixed   Returns 1 if the field in the given row is SQL NULL,\n *                     0 if not. FALSE is returned if the row is out of\n *                     range, or upon any other error.\n */", 
"pg_field_name", T(String), S(0), "result", T(Variant), NULL, NULL, S(0), "field_number", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-name.php )\n *\n * pg_field_name() returns the name of the field occupying the given\n * field_number in the given PostgreSQL result resource. Field numbering\n * starts from 0.\n *\n * This function used to be called pg_fieldname().\n *\n * @result     mixed\n * @field_number\n *             int\n *\n * @return     string  The field name, or FALSE on error.\n */", 
"pg_field_num", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "field_name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-num.php )\n *\n * pg_field_num() will return the number of the field number that\n * corresponds to the field_name in the given PostgreSQL result resource.\n *\n * This function used to be called pg_fieldnum().\n *\n * @result     mixed\n * @field_name string\n *\n * @return     mixed   The field number (numbered from 0), or -1 on error.\n */", 
"pg_field_prtlen", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "field_name_or_number", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-prtlen.php )\n *\n * pg_field_prtlen() returns the actual printed length (number of\n * characters) of a specific value in a PostgreSQL result. Row numbering\n * starts at 0. This function will return -1 on an error.\n *\n * field_name_or_number can be passed either as an integer or as a string.\n * If it is passed as an integer, PHP recognises it as the field number,\n * otherwise as field name.\n *\n * See the example given at the pg_field_name() page.\n *\n * This function used to be called pg_fieldprtlen().\n *\n * @result     mixed\n * @field_name_or_number\n *             mixed\n *\n * @return     mixed   The field printed length, or FALSE on error.\n */", 
"pg_field_size", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "field_number", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-size.php )\n *\n * pg_field_size() returns the internal storage size (in bytes) of the\n * field number in the given PostgreSQL result.\n *\n * This function used to be called pg_fieldsize().\n *\n * @result     mixed\n * @field_number\n *             int\n *\n * @return     mixed   The internal field storage size (in bytes). -1\n *                     indicates a variable length field. FALSE is returned\n *                     on error.\n */", 
"pg_field_table", T(String), S(0), "result", T(Variant), NULL, NULL, S(0), "field_number", T(Int64), NULL, NULL, S(0), "oid_only", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-table.php )\n *\n * pg_field_table() returns the name of the table that field belongs to, or\n * the table's oid if oid_only is TRUE.\n *\n * @result     mixed\n * @field_number\n *             int\n * @oid_only   string\n *\n * @return     string  On success either the fields table name or oid. Or,\n *                     FALSE on failure.\n */", 
"pg_field_type_oid", T(String), S(0), "result", T(Variant), NULL, NULL, S(0), "field_number", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-type-oid.php )\n *\n * pg_field_type_oid() returns an integer containing the OID of the base\n * type of the given field_number in the given PostgreSQL result resource.\n *\n * You can get more information about the field type by querying\n * PostgreSQL's pg_type system table using the OID obtained with this\n * function. The PostgreSQL format_type() function will convert a type OID\n * into an SQL standard type name.\n *\n * If the field uses a PostgreSQL domain (rather than a basic type), it is\n * the OID of the domain's underlying type that is returned, rather than\n * the OID of the domain itself.\n *\n * @result     mixed\n * @field_number\n *             int\n *\n * @return     string  The OID of the field's base type. FALSE is returned\n *                     on error.\n */", 
"pg_field_type", T(String), S(0), "result", T(Variant), NULL, NULL, S(0), "field_number", T(Int64), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-field-type.php )\n *\n * pg_field_type() returns a string containing the base type name of the\n * given field_number in the given PostgreSQL result resource.\n *\n * If the field uses a PostgreSQL domain (rather than a basic type), it is\n * the name of the domain's underlying type that is returned, rather than\n * the name of the domain itself.\n *\n * This function used to be called pg_fieldtype().\n *\n * @result     mixed\n * @field_number\n *             int\n *\n * @return     string  A string containing the base name of the field's\n *                     type, or FALSE on error.\n */", 
"pg_free_result", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-free-result.php )\n *\n * pg_free_result() frees the memory and data associated with the specified\n * PostgreSQL query result resource.\n *\n * This function need only be called if memory consumption during script\n * execution is a problem. Otherwise, all result memory will be\n * automatically freed when the script ends.\n *\n * This function used to be called pg_freeresult().\n *\n * @result     mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_get_notify", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "result_type", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-get-notify.php )\n *\n * pg_get_notify() gets notifications generated by a NOTIFY SQL command. To\n * receive notifications, the LISTEN SQL command must be issued.\n *\n * @connection mixed\n * @result_type\n *             int\n *\n * @return     mixed   An array containing the NOTIFY message name and\n *                     backend PID. Otherwise if no NOTIFY is waiting, then\n *                     FALSE is returned.\n */", 
"pg_get_pid", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-get-pid.php )\n *\n * pg_get_pid() gets the backend's (database server process) PID. The PID\n * is useful to determine whether or not a NOTIFY message received via\n * pg_get_notify() is sent from another process or not.\n *\n * @connection mixed\n *\n * @return     string  The backend database process ID.\n */", 
"pg_get_result", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-get-result.php )\n *\n * pg_get_result() gets the result resource from an asynchronous query\n * executed by pg_send_query(), pg_send_query_params() or\n * pg_send_execute(). pg_send_query() and the other asynchronous query\n * functions can send multiple queries to a PostgreSQL server and\n * pg_get_result() is used to get each query's results, one by one.\n *\n * @connection mixed\n *\n * @return     mixed   The result resource, or FALSE if no more results are\n *                     available.\n */", 
"pg_host", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-host.php )\n *\n * pg_host() returns the host name of the given PostgreSQL connection\n * resource is connected to.\n *\n * @connection mixed\n *\n * @return     string  A string containing the name of the host the\n *                     connection is to, or FALSE on error.\n */", 
"pg_insert", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "assoc_array", T(String), NULL, NULL, S(0), "options", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-insert.php )\n *\n * pg_insert() inserts the values of assoc_array into the table specified\n * by table_name. If options is specified, pg_convert() is applied to\n * assoc_array with the specified options. WarningThis function is\n * EXPERIMENTAL. The behaviour of this function, its name, and surrounding\n * documentation may change without notice in a future release of PHP. This\n * function should be used at your own risk.\n *\n * @connection mixed\n * @table_name string\n * @assoc_array\n *             string\n * @options    string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Returns\n *                     string if PGSQL_DML_STRING is passed via options.\n */", 
"pg_last_error", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-last-error.php )\n *\n * pg_last_error() returns the last error message for a given connection.\n *\n * Error messages may be overwritten by internal PostgreSQL (libpq)\n * function calls. It may not return an appropriate error message if\n * multiple errors occur inside a PostgreSQL module function.\n *\n * Use pg_result_error(), pg_result_error_field(), pg_result_status() and\n * pg_connection_status() for better error handling.\n *\n * This function used to be called pg_errormessage().\n *\n * @connection mixed\n *\n * @return     string  A string containing the last error message on the\n *                     given connection, or FALSE on error.\n */", 
"pg_last_notice", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-last-notice.php )\n *\n * pg_last_notice() returns the last notice message from the PostgreSQL\n * server on the specified connection. The PostgreSQL server sends notice\n * messages in several cases, for instance when creating a SERIAL column in\n * a table.\n *\n * With pg_last_notice(), you can avoid issuing useless queries by checking\n * whether or not the notice is related to your transaction.\n *\n * Notice message tracking can be set to optional by setting 1 for\n * pgsql.ignore_notice in php.ini.\n *\n * Notice message logging can be set to optional by setting 0 for\n * pgsql.log_notice in php.ini. Unless pgsql.ignore_notice is set to 0,\n * notice message cannot be logged.\n *\n * @connection mixed\n *\n * @return     string  A string containing the last notice on the given\n *                     connection, or FALSE on error.\n */", 
"pg_last_oid", T(String), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-last-oid.php )\n *\n * pg_last_oid() is used to retrieve the OID assigned to an inserted row.\n *\n * OID field became an optional field from PostgreSQL 7.2 and will not be\n * present by default in PostgreSQL 8.1. When the OID field is not present\n * in a table, the programmer must use pg_result_status() to check for\n * successful insertion.\n *\n * To get the value of a SERIAL field in an inserted row, it is necessary\n * to use the PostgreSQL CURRVAL function, naming the sequence whose last\n * value is required. If the name of the sequence is unknown, the\n * pg_get_serial_sequence PostgreSQL 8.0 function is necessary.\n *\n * PostgreSQL 8.1 has a function LASTVAL that returns the value of the most\n * recently used sequence in the session. This avoids the need for naming\n * the sequence, table or column altogether.\n *\n * This function used to be called pg_getlastoid().\n *\n * @result     mixed\n *\n * @return     string  A string containing the OID assigned to the most\n *                     recently inserted row in the specified connection,\n *                     or FALSE on error or no available OID.\n */", 
"pg_lo_close", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-close.php )\n *\n * pg_lo_close() closes a large object. large_object is a resource for the\n * large object from pg_lo_open().\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_loclose().\n *\n * @result     mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_lo_create", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "object_id", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-create.php )\n *\n * pg_lo_create() creates a large object and returns the OID of the large\n * object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are\n * not supported, the object is created always with both read and write\n * access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3\n * and above).\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * Instead of using the large object interface (which has no access\n * controls and is cumbersome to use), try PostgreSQL's bytea column type\n * and pg_escape_bytea().\n *\n * This function used to be called pg_locreate().\n *\n * @connection mixed\n * @object_id  string\n *\n * @return     mixed   A large object OID or FALSE on error.\n */", 
"pg_lo_export", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "oid", T(String), NULL, NULL, S(0), "pathname", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-export.php )\n *\n * pg_lo_export() takes a large object in a PostgreSQL database and saves\n * its contents to a file on the local filesystem.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_loexport().\n *\n * @connection mixed\n * @oid        string\n * @pathname   string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_lo_import", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "pathname", T(String), NULL, NULL, S(0), "object_id", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-import.php )\n *\n * pg_lo_import() creates a new large object in the database using a file\n * on the filesystem as its data source.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block. When safe mode is enabled, PHP checks whether the\n * files or directories being operated upon have the same UID (owner) as\n * the script that is being executed.\n *\n * This function used to be called pg_loimport().\n *\n * @connection mixed\n * @pathname   string\n * @object_id  string\n *\n * @return     mixed   The OID of the newly created large object, or FALSE\n *                     on failure.\n */", 
"pg_lo_open", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "oid", T(String), NULL, NULL, S(0), "mode", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-open.php )\n *\n * pg_lo_open() opens a large object in the database and returns large\n * object resource so that it can be manipulated. Warning\n *\n * Do not close the database connection before closing the large object\n * resource.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_loopen().\n *\n * @connection mixed\n * @oid        string\n * @mode       string\n *\n * @return     mixed   A large object resource or FALSE on error.\n */", 
"pg_lo_read_all", T(Variant), S(0), "large_object", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-read-all.php )\n *\n * pg_lo_read_all() reads a large object and passes it straight through to\n * the browser after sending all pending headers. Mainly intended for\n * sending binary data like images or sound.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_loreadall().\n *\n * @large_object\n *             string\n *\n * @return     mixed   Number of bytes read or FALSE on error.\n */", 
"pg_lo_read", T(Variant), S(0), "large_object", T(String), NULL, NULL, S(0), "len", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-read.php )\n *\n * pg_lo_read() reads at most len bytes from a large object and returns it\n * as a string.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_loread().\n *\n * @large_object\n *             string\n * @len        string\n *\n * @return     mixed   A string containing len bytes from the large object,\n *                     or FALSE on error.\n */", 
"pg_lo_seek", T(Variant), S(0), "large_object", T(String), NULL, NULL, S(0), "offset", T(String), NULL, NULL, S(0), "whence", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-seek.php )\n *\n * pg_lo_seek() seeks a position within a large object resource.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * @large_object\n *             string\n * @offset     string\n * @whence     string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_lo_tell", T(Variant), S(0), "large_object", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-tell.php )\n *\n * pg_lo_tell() returns the current position (offset from the beginning) of\n * a large object.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * @large_object\n *             string\n *\n * @return     mixed   The current seek offset (in number of bytes) from\n *                     the beginning of the large object. If there is an\n *                     error, the return value is negative.\n */", 
"pg_lo_unlink", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "oid", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-unlink.php )\n *\n * pg_lo_unlink() deletes a large object with the oid. Returns TRUE on\n * success or FALSE on failure.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_lounlink().\n *\n * @connection mixed\n * @oid        string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_lo_write", T(Variant), S(0), "large_object", T(String), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), "len", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-lo-write.php )\n *\n * pg_lo_write() writes data into a large object at the current seek\n * position.\n *\n * To use the large object interface, it is necessary to enclose it within\n * a transaction block.\n *\n * This function used to be called pg_lowrite().\n *\n * @large_object\n *             string\n * @data       string\n * @len        string\n *\n * @return     mixed   The number of bytes written to the large object, or\n *                     FALSE on error.\n */", 
"pg_meta_data", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-meta-data.php )\n *\n * pg_meta_data() returns table definition for table_name as an array.\n * WarningThis function is EXPERIMENTAL. The behaviour of this function,\n * its name, and surrounding documentation may change without notice in a\n * future release of PHP. This function should be used at your own risk.\n *\n * @connection mixed\n * @table_name string\n *\n * @return     mixed   An array of the table definition, or FALSE on error.\n */", 
"pg_num_fields", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-num-fields.php )\n *\n * pg_num_fields() returns the number of fields (columns) in a PostgreSQL\n * result resource.\n *\n * This function used to be called pg_numfields().\n *\n * @result     mixed\n *\n * @return     mixed   The number of fields (columns) in the result. On\n *                     error, -1 is returned.\n */", 
"pg_num_rows", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-num-rows.php )\n *\n * pg_num_rows() will return the number of rows in a PostgreSQL result\n * resource.\n *\n * This function used to be called pg_numrows().\n *\n * @result     mixed\n *\n * @return     mixed   The number of rows in the result. On error, -1 is\n *                     returned.\n */", 
"pg_options", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-options.php )\n *\n * pg_options() will return a string containing the options specified on\n * the given PostgreSQL connection resource.\n *\n * @connection mixed\n *\n * @return     mixed   A string containing the connection options, or FALSE\n *                     on error.\n */", 
"pg_parameter_status", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), "param_name", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-parameter-status.php\n * )\n *\n * Looks up a current parameter setting of the server.\n *\n * Certain parameter values are reported by the server automatically at\n * connection startup or whenever their values change.\n * pg_parameter_status() can be used to interrogate these settings. It\n * returns the current value of a parameter if known, or FALSE if the\n * parameter is not known.\n *\n * Parameters reported as of PostgreSQL 8.0 include server_version,\n * server_encoding, client_encoding, is_superuser, session_authorization,\n * DateStyle, TimeZone, and integer_datetimes. (server_encoding, TimeZone,\n * and integer_datetimes were not reported by releases before 8.0.) Note\n * that server_version, server_encoding and integer_datetimes cannot change\n * after PostgreSQL startup.\n *\n * PostgreSQL 7.3 or lower servers do not report parameter settings,\n * pg_parameter_status() includes logic to obtain values for server_version\n * and client_encoding anyway. Applications are encouraged to use\n * pg_parameter_status() rather than ad hoc code to determine these values.\n * Caution\n *\n * On a pre-7.4 PostgreSQL server, changing client_encoding via SET after\n * connection startup will not be reflected by pg_parameter_status().\n *\n * @connection mixed\n * @param_name string\n *\n * @return     string  string containing the value of the parameter, FALSE\n *                     on failure or invalid param_name.\n */", 
"pg_pconnect", T(Variant), S(0), "connection_string", T(String), NULL, NULL, S(0), "host", T(String), NULL, NULL, S(0), "hostaddr", T(String), NULL, NULL, S(0), "port", T(String), NULL, NULL, S(0), "dbname", T(String), NULL, NULL, S(0), "user", T(String), NULL, NULL, S(0), "password", T(String), NULL, NULL, S(0), "connect_timeout", T(String), NULL, NULL, S(0), "options", T(String), NULL, NULL, S(0), "tty", T(String), NULL, NULL, S(0), "sslmode", T(String), NULL, NULL, S(0), "requiressl", T(String), NULL, NULL, S(0), "service", T(String), NULL, NULL, S(0), "connect_type", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-pconnect.php )\n *\n * pg_pconnect() opens a connection to a PostgreSQL database. It returns a\n * connection resource that is needed by other PostgreSQL functions.\n *\n * If a second call is made to pg_pconnect() with the same\n * connection_string as an existing connection, the existing connection\n * will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as\n * connect_type.\n *\n * To enable persistent connection, the pgsql.allow_persistent php.ini\n * directive must be set to \"On\" (which is the default). The maximum number\n * of persistent connection can be defined with the pgsql.max_persistent\n * php.ini directive (defaults to -1 for no limit). The total number of\n * connections can be set with the pgsql.max_links php.ini directive.\n *\n * pg_close() will not close persistent links generated by pg_pconnect().\n *\n * @connection_string\n *             string\n * @host       string\n * @hostaddr   string\n * @port       string\n * @dbname     string\n * @user       string\n * @password   string\n * @connect_timeout\n *             string\n * @options    string\n * @tty        string\n * @sslmode    string\n * @requiressl string\n * @service    string\n * @connect_type\n *             string\n *\n * @return     mixed   PostgreSQL connection resource on success, FALSE on\n *                     failure.\n */", 
"pg_ping", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-ping.php )\n *\n * pg_ping() pings a database connection and tries to reconnect it if it is\n * broken.\n *\n * @connection mixed\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_port", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-port.php )\n *\n * pg_port() returns the port number that the given PostgreSQL connection\n * resource is connected to.\n *\n * @connection mixed\n *\n * @return     mixed   An int containing the port number of the database\n *                     server the connection is to, or FALSE on error.\n */", 
"pg_prepare", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "stmtname", T(String), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-prepare.php )\n *\n * pg_prepare() creates a prepared statement for later execution with\n * pg_execute() or pg_send_execute(). This feature allows commands that\n * will be used repeatedly to be parsed and planned just once, rather than\n * each time they are executed. pg_prepare() is supported only against\n * PostgreSQL 7.4 or higher connections; it will fail when using earlier\n * versions.\n *\n * The function creates a prepared statement named stmtname from the query\n * string, which must contain a single SQL command. stmtname may be \"\" to\n * create an unnamed statement, in which case any pre-existing unnamed\n * statement is automatically replaced; otherwise it is an error if the\n * statement name is already defined in the current session. If any\n * parameters are used, they are referred to in the query as $1, $2, etc.\n *\n * Prepared statements for use with pg_prepare() can also be created by\n * executing SQL PREPARE statements. (But pg_prepare() is more flexible\n * since it does not require parameter types to be pre-specified.) Also,\n * although there is no PHP function for deleting a prepared statement, the\n * SQL DEALLOCATE statement can be used for that purpose.\n *\n * @connection mixed\n * @stmtname   string\n * @query      string\n *\n * @return     mixed   A query result resource on success or FALSE on\n *                     failure.\n */", 
"pg_put_line", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-put-line.php )\n *\n * pg_put_line() sends a NULL-terminated string to the PostgreSQL backend\n * server. This is needed in conjunction with PostgreSQL's COPY FROM\n * command. COPY is a high-speed data loading interface supported by\n * PostgreSQL. Data is passed in without being parsed, and in a single\n * transaction.\n *\n * An alternative to using raw pg_put_line() commands is to use\n * pg_copy_from(). This is a far simpler interface.\n *\n * The application must explicitly send the two characters \"\\.\" on the last\n * line to indicate to the backend that it has finished sending its data,\n * before issuing pg_end_copy(). Warning\n *\n * Use of the pg_put_line() causes most large object operations, including\n * pg_lo_read() and pg_lo_tell(), to subsequently fail. You can use\n * pg_copy_from() and pg_copy_to() instead.\n *\n * @connection mixed\n * @data       string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_query_params", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), "params", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-query-params.php )\n *\n * Submits a command to the server and waits for the result, with the\n * ability to pass parameters separately from the SQL command text.\n *\n * pg_query_params() is like pg_query(), but offers additional\n * functionality: parameter values can be specified separately from the\n * command string proper. pg_query_params() is supported only against\n * PostgreSQL 7.4 or higher connections; it will fail when using earlier\n * versions.\n *\n * If parameters are used, they are referred to in the query string as $1,\n * $2, etc. params specifies the actual values of the parameters. A NULL\n * value in this array means the corresponding parameter is SQL NULL.\n *\n * The primary advantage of pg_query_params() over pg_query() is that\n * parameter values may be separated from the query string, thus avoiding\n * the need for tedious and error-prone quoting and escaping. Unlike\n * pg_query(), pg_query_params() allows at most one SQL command in the\n * given string. (There can be semicolons in it, but not more than one\n * nonempty command.)\n *\n * @connection mixed\n * @query      string\n * @params     vector\n *\n * @return     mixed   A query result resource on success or FALSE on\n *                     failure.\n */", 
"pg_query", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-query.php )\n *\n * pg_query() executes the query on the specified database connection.\n *\n * If an error occurs, and FALSE is returned, details of the error can be\n * retrieved using the pg_last_error() function if the connection is valid.\n *\n * Although connection can be omitted, it is not recommended, since it can\n * be the cause of hard to find bugs in scripts.\n *\n * This function used to be called pg_exec(). pg_exec() is still available\n * for compatibility reasons, but users are encouraged to use the newer\n * name.\n *\n * @connection mixed\n * @query      string\n *\n * @return     mixed   A query result resource on success or FALSE on\n *                     failure.\n */", 
"pg_result_error_field", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "fieldcode", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-result-error-field.php )\n *\n * pg_result_error_field() returns one of the detailed error message fields\n * associated with result resource. It is only available against a\n * PostgreSQL 7.4 or above server. The error field is specified by the\n * fieldcode.\n *\n * Because pg_query() and pg_query_params() return FALSE if the query\n * fails, you must use pg_send_query() and pg_get_result() to get the\n * result handle.\n *\n * If you need to get additional error information from failed pg_query()\n * queries, use pg_set_error_verbosity() and pg_last_error() and then parse\n * the result.\n *\n * @result     mixed\n * @fieldcode  string\n *\n * @return     mixed   string containing the contents of the error field,\n *                     NULL if the field does not exist or FALSE on\n *                     failure.\n */", 
"pg_result_error", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-result-error.php )\n *\n * pg_result_error() returns any error message associated with the result\n * resource. Therefore, the user has a better chance of getting the correct\n * error message than with pg_last_error().\n *\n * The function pg_result_error_field() can give much greater detail on\n * result errors than pg_result_error().\n *\n * Because pg_query() returns FALSE if the query fails, you must use\n * pg_send_query() and pg_get_result() to get the result handle.\n *\n * @result     mixed\n *\n * @return     mixed   Returns a string if there is an error associated\n *                     with the result parameter, FALSE otherwise.\n */", 
"pg_result_seek", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "offset", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-result-seek.php )\n *\n * pg_result_seek() sets the internal row offset in a result resource.\n *\n * @result     mixed\n * @offset     string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure.\n */", 
"pg_result_status", T(Variant), S(0), "result", T(Variant), NULL, NULL, S(0), "type", T(Int64), "i:1;", "1", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-result-status.php )\n *\n * pg_result_status() returns the status of a result resource, or the\n * PostgreSQL command completion tag associated with the result\n *\n * @result     mixed\n * @type       int\n *\n * @return     mixed   Possible return values are PGSQL_EMPTY_QUERY,\n *                     PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT,\n *                     PGSQL_COPY_IN, PGSQL_BAD_RESPONSE,\n *                     PGSQL_NONFATAL_ERROR and PGSQL_FATAL_ERROR if\n *                     PGSQL_STATUS_LONG is specified. Otherwise, a string\n *                     containing the PostgreSQL command tag is returned.\n */", 
"pg_select", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "assoc_array", T(String), NULL, NULL, S(0), "options", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-select.php )\n *\n * pg_select() selects records specified by assoc_array which has\n * field=>value. For a successful query, it returns an array containing all\n * records and fields that match the condition specified by assoc_array.\n * options is specified, pg_convert() is applied to assoc_array with the\n * specified flags. WarningThis function is EXPERIMENTAL. The behaviour of\n * this function, its name, and surrounding documentation may change\n * without notice in a future release of PHP. This function should be used\n * at your own risk.\n *\n * @connection mixed\n * @table_name string\n * @assoc_array\n *             string\n * @options    string\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Returns\n *                     string if PGSQL_DML_STRING is passed via options.\n */", 
"pg_send_execute", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "stmtname", T(String), NULL, NULL, S(0), "params", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-send-execute.php )\n *\n * Sends a request to execute a prepared statement with given parameters,\n * without waiting for the result(s).\n *\n * This is similar to pg_send_query_params(), but the command to be\n * executed is specified by naming a previously-prepared statement, instead\n * of giving a query string. The function's parameters are handled\n * identically to pg_execute(). Like pg_execute(), it will not work on\n * pre-7.4 versions of PostgreSQL.\n *\n * @connection mixed\n * @stmtname   string\n * @params     vector\n *\n * @return     mixed   TRUE on success, FALSE on failure. Use\n *                     pg_get_result() to determine the query result.\n */", 
"pg_send_prepare", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "stmtname", T(String), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-send-prepare.php )\n *\n * Sends a request to create a prepared statement with the given\n * parameters, without waiting for completion.\n *\n * This is an asynchronous version of pg_prepare(): it returns TRUE if it\n * was able to dispatch the request, and FALSE if not. After a successful\n * call, call pg_get_result() to determine whether the server successfully\n * created the prepared statement. The function's parameters are handled\n * identically to pg_prepare(). Like pg_prepare(), it will not work on\n * pre-7.4 versions of PostgreSQL.\n *\n * @connection mixed\n * @stmtname   string\n * @query      string\n *\n * @return     mixed   TRUE on success, FALSE on failure. Use\n *                     pg_get_result() to determine the query result.\n */", 
"pg_send_query_params", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), "params", T(Array), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-send-query-params.php )\n *\n * Submits a command and separate parameters to the server without waiting\n * for the result(s).\n *\n * This is equivalent to pg_send_query() except that query parameters can\n * be specified separately from the query string. The function's parameters\n * are handled identically to pg_query_params(). Like pg_query_params(), it\n * will not work on pre-7.4 PostgreSQL connections, and it allows only one\n * command in the query string.\n *\n * @connection mixed\n * @query      string\n * @params     vector\n *\n * @return     mixed   TRUE on success or FALSE on failure.\n *\n *                     Use pg_get_result() to determine the query result.\n */", 
"pg_send_query", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "query", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-send-query.php )\n *\n * pg_send_query() sends a query or queries asynchronously to the\n * connection. Unlike pg_query(), it can send multiple queries at once to\n * PostgreSQL and get the results one by one using pg_get_result().\n *\n * Script execution is not blocked while the queries are executing. Use\n * pg_connection_busy() to check if the connection is busy (i.e. the query\n * is executing). Queries may be cancelled using pg_cancel_query().\n *\n * Although the user can send multiple queries at once, multiple queries\n * cannot be sent over a busy connection. If a query is sent while the\n * connection is busy, it waits until the last query is finished and\n * discards all its results.\n *\n * @connection mixed\n * @query      string\n *\n * @return     mixed   TRUE on success or FALSE on failure.\n *\n *                     Use pg_get_result() to determine the query result.\n */", 
"pg_set_client_encoding", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "encoding", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-set-client-encoding.php )\n *\n * pg_set_client_encoding() sets the client encoding and returns 0 if\n * success or -1 if error.\n *\n * PostgreSQL will automatically convert data in the backend database\n * encoding into the frontend encoding.\n *\n * The function used to be called pg_setclientencoding().\n *\n * @connection mixed\n * @encoding   string\n *\n * @return     mixed   Returns 0 on success or -1 on error.\n */", 
"pg_set_error_verbosity", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "verbosity", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-set-error-verbosity.php )\n *\n * Determines the verbosity of messages returned by pg_last_error() and\n * pg_result_error().\n *\n * pg_set_error_verbosity() sets the verbosity mode, returning the\n * connection's previous setting. In PGSQL_ERRORS_TERSE mode, returned\n * messages include severity, primary text, and position only; this will\n * normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT)\n * produces messages that include the above plus any detail, hint, or\n * context fields (these may span multiple lines). The PGSQL_ERRORS_VERBOSE\n * mode includes all available fields. Changing the verbosity does not\n * affect the messages available from already-existing result objects, only\n * subsequently-created ones.\n *\n * @connection mixed\n * @verbosity  string\n *\n * @return     mixed   The previous verbosity level: PGSQL_ERRORS_TERSE,\n *                     PGSQL_ERRORS_DEFAULT or PGSQL_ERRORS_VERBOSE.\n */", 
"pg_trace", T(Boolean), S(0), "pathname", T(String), NULL, NULL, S(0), "mode", T(String), "s:1:\"w\";", "\"w\"", S(0), "connection", T(Variant), "N;", "null", S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-trace.php )\n *\n * pg_trace() enables tracing of the PostgreSQL frontend/backend\n * communication to a file. To fully understand the results, one needs to\n * be familiar with the internals of PostgreSQL communication protocol.\n *\n * For those who are not, it can still be useful for tracing errors in\n * queries sent to the server, you could do for example grep '^To backend'\n * trace.log and see what queries actually were sent to the PostgreSQL\n * server. For more information, refer to the \273 PostgreSQL Documentation.\n *\n * @pathname   string\n * @mode       string\n * @connection mixed\n *\n * @return     bool    Returns TRUE on success or FALSE on failure.\n */", 
"pg_transaction_status", T(Int32), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from\n * http://php.net/manual/en/function.pg-transaction-status.php )\n *\n * Returns the current in-transaction status of the server. Caution\n *\n * pg_transaction_status() will give incorrect results when using a\n * PostgreSQL 7.3 server that has the parameter autocommit set to off. The\n * server-side autocommit feature has been deprecated and does not exist in\n * later server versions.\n *\n * @connection mixed\n *\n * @return     int     PGSQL_TRANSACTION_IDLE (currently idle),\n *                     PGSQL_TRANSACTION_ACTIVE (a command is in progress),\n *                     PGSQL_TRANSACTION_INTRANS (idle, in a valid\n *                     transaction block), or PGSQL_TRANSACTION_INERROR\n *                     (idle, in a failed transaction block).\n *                     PGSQL_TRANSACTION_UNKNOWN is reported if the\n *                     connection is bad. PGSQL_TRANSACTION_ACTIVE is\n *                     reported only when a query has been sent to the\n *                     server and not yet completed.\n */", 
"pg_tty", T(String), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-tty.php )\n *\n * pg_tty() returns the TTY name that server side debugging output is sent\n * to on the given PostgreSQL connection resource.\n *\n * pg_tty() is obsolete, since the server no longer pays attention to the\n * TTY setting, but the function remains for backwards compatibility.\n *\n * @connection mixed\n *\n * @return     string  A string containing the debug TTY of the connection,\n *                     or FALSE on error.\n */", 
"pg_unescape_bytea", T(String), S(0), "data", T(String), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-unescape-bytea.php )\n *\n * pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns\n * the unescaped string, possibly containing binary data.\n *\n * When you SELECT a bytea type, PostgreSQL returns octal byte values\n * prefixed with '\\' (e.g. \\032). Users are supposed to convert back to\n * binary format manually.\n *\n * This function requires PostgreSQL 7.2 or later. With PostgreSQL 7.2.0\n * and 7.2.1, bytea values must be cast when you enable multi-byte support.\n * i.e. INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea);\n * PostgreSQL 7.2.2 or later does not need a cast. The exception is when\n * the client and backend character encoding does not match, and there may\n * be multi-byte stream error. User must then cast to bytea to avoid this\n * error.\n *\n * @data       string\n *\n * @return     string  A string containing the unescaped data.\n */", 
"pg_untrace", T(Boolean), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-untrace.php )\n *\n * Stop tracing started by pg_trace().\n *\n * @connection mixed\n *\n * @return     bool    Always returns TRUE.\n */", 
"pg_update", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), "table_name", T(String), NULL, NULL, S(0), "data", T(Variant), NULL, NULL, S(0), "condition", T(Variant), NULL, NULL, S(0), "options", T(Int32), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-update.php )\n *\n * pg_update() updates records that matches condition with data. If options\n * is specified, pg_convert() is applied to data with specified options.\n * WarningThis function is EXPERIMENTAL. The behaviour of this function,\n * its name, and surrounding documentation may change without notice in a\n * future release of PHP. This function should be used at your own risk.\n *\n * @connection mixed\n * @table_name string\n * @data       mixed\n * @condition  mixed\n * @options    int\n *\n * @return     mixed   Returns TRUE on success or FALSE on failure. Returns\n *                     string if PGSQL_DML_STRING is passed via options.\n */", 
"pg_version", T(Variant), S(0), "connection", T(Variant), NULL, NULL, S(0), NULL, S(16384), "/**\n * ( excerpt from http://php.net/manual/en/function.pg-version.php )\n *\n * pg_version() returns an array with the client, protocol and server\n * version. Protocol and server versions are only available if PHP was\n * compiled with PostgreSQL 7.4 or later.\n *\n * For more detailed server information, use pg_parameter_status().\n *\n * @connection mixed\n *\n * @return     mixed   Returns an array with client, protocol and server\n *                     keys and values (if available). Returns FALSE on\n *                     error or invalid connection.\n */", 

#elif EXT_TYPE == 1
"PGSQL_CONNECT_FORCE_NEW", T(Int64),
"PGSQL_CONNECTION_BAD", T(Int64),
"PGSQL_CONNECTION_OK", T(Int64),
"PGSQL_SEEK_SET", T(Int64),
"PGSQL_SEEK_CUR", T(Int64),
"PGSQL_SEEK_END", T(Int64),
"PGSQL_EMPTY_QUERY", T(Int64),
"PGSQL_COMMAND_OK", T(Int64),
"PGSQL_TUPLES_OK", T(Int64),
"PGSQL_COPY_OUT", T(Int64),
"PGSQL_COPY_IN", T(Int64),
"PGSQL_BAD_RESPONSE", T(Int64),
"PGSQL_NONFATAL_ERROR", T(Int64),
"PGSQL_FATAL_ERROR", T(Int64),
"PGSQL_TRANSACTION_IDLE", T(Int64),
"PGSQL_TRANSACTION_ACTIVE", T(Int64),
"PGSQL_TRANSACTION_INTRANS", T(Int64),
"PGSQL_TRANSACTION_INERROR", T(Int64),
"PGSQL_TRANSACTION_UNKNOWN", T(Int64),
"PGSQL_DIAG_SEVERITY", T(Int64),
"PGSQL_DIAG_SQLSTATE", T(Int64),
"PGSQL_DIAG_MESSAGE_PRIMARY", T(Int64),
"PGSQL_DIAG_MESSAGE_DETAIL", T(Int64),
"PGSQL_DIAG_MESSAGE_HINT", T(Int64),
"PGSQL_DIAG_STATEMENT_POSITION", T(Int64),
"PGSQL_DIAG_INTERNAL_POSITION", T(Int64),
"PGSQL_DIAG_INTERNAL_QUERY", T(Int64),
"PGSQL_DIAG_CONTEXT", T(Int64),
"PGSQL_DIAG_SOURCE_FILE", T(Int64),
"PGSQL_DIAG_SOURCE_LINE", T(Int64),
"PGSQL_DIAG_SOURCE_FUNCTION", T(Int64),
"PGSQL_ERRORS_TERSE", T(Int64),
"PGSQL_ERRORS_DEFAULT", T(Int64),
"PGSQL_ERRORS_VERBOSE", T(Int64),
"PGSQL_STATUS_LONG", T(Int64),
"PGSQL_STATUS_STRING", T(Int64),
"PGSQL_CONV_IGNORE_DEFAULT", T(Int64),
"PGSQL_CONV_FORCE_NULL", T(Int64),
"PGSQL_CONV_IGNORE_DEFAULT", T(Int64),
"PGSQL_ASSOC", T(Int64),
"PGSQL_NUM", T(Int64),
"PGSQL_BOTH", T(Int64),

#elif EXT_TYPE == 2

#elif EXT_TYPE == 3

#endif
